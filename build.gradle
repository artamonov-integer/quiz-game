
allprojects {
    ext.artifactGroup = 'com.integer.quiz'
    ext.artifactVersion = '0.1'
    ext.isSnapshot = true
    ext.tomcatDir = "$rootDir/build/tomcat"
    // ext.copyright = "Copyright (c) 2013 com.integer.quiz" // Copyright Notice for IDEA project
    // ext.vcs = 'svn' // VCS for IDEA project
}

buildscript {
    ext.cubaVersion = '4.0.4'
    repositories {
        maven {
            url 'http://repository.haulmont.com:8587/nexus/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':app-global')
def coreModule = project(':app-core')
def guiModule = project(':app-gui')
def webModule = project(':app-web')

def portalModule = project(':app-portal')

def postgres = 'postgresql:postgresql:9.1-901.jdbc4'
def servletApi = 'org.apache.tomcat:servlet-api:6.0.20'

apply(plugin: 'idea')
apply(plugin: 'cuba')

configure([globalModule, coreModule, guiModule, webModule, portalModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    configurations.each {
        it.resolutionStrategy.cacheChangingModulesFor 2, "minutes"
    }

    dependencies {
        testCompile('junit:junit:4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    dependencies {
        compile("com.haulmont.cuba:cuba-global:$cubaVersion")

    }

    task enhance(type: CubaEnhancing) {
        persistenceXml = "$globalModule.projectDir/src/persistence.xml"
    }
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(postgres)
        testRuntime(postgres)
        compile("com.haulmont.cuba:cuba-core:$cubaVersion")
        testCompile("com.haulmont.cuba:cuba-core:$cubaVersion:tests")
        testCompile("com.haulmont.cuba:cuba-shared-lib:$cubaVersion")
        dbscripts("com.haulmont.cuba:cuba-core:$cubaVersion:db@zip")

    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app-core'
        appJars('cuba-global', 'cuba-core', 
                'app-global', 'app-core')
    }

    task createDb(dependsOn: assemble, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'quiz'
        dbUser = 'root'
        dbPassword = 'root'
    }

    task updateDb(dependsOn: assemble, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'quiz'
        dbUser = 'root'
        dbPassword = 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile("com.haulmont.cuba:cuba-gui:$cubaVersion")
        compile("com.haulmont.cuba:cuba-client:$cubaVersion")

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/integer/quiz/**"
        into "$tomcatDir/conf/app"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile("com.haulmont.cuba:cuba-web:$cubaVersion")
        webcontent("com.haulmont.cuba:cuba-web:$cubaVersion:web@zip")

    }

    task webArchive(type: Zip) {
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-web', 'cuba-global', 'cuba-gui', 'cuba-client', 
                'app-global', 'app-gui', 'app-web')
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/integer/quiz/**"
        into "$tomcatDir/conf/app"
    }
}


configure(portalModule) {
    dependencies {
        compile(globalModule)
        compile("com.haulmont.cuba:cuba-portal:$cubaVersion")
        provided(group: 'org.apache.tomcat', name: 'servlet-api', version: '6.0.20')

    }

    def webappName = 'app-portal'
    def resourcesDir = "$tomcatDir/webapps/$webappName/resources"
    def ftlDir = "$tomcatDir/webapps/$webappName/WEB-INF/templates"

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = webappName
        appJars('cuba-portal', 'cuba-global', 'cuba-client', 
                'app-global', 'app-portal')
    }

    task deployStatic() << {
        copy {
            from file('web/resources')
            include '**/*.css'
            include '**/*.js'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            into resourcesDir
        }
        copy {
            from file('web/WEB-INF/templates')
            include '**/*.ftl'
            into ftlDir
        }
    }

    task cleanStatic() << {
        delete resourcesDir
        delete ftlDir
    }

    task webArchive(type: Zip) {
        from file('web')
        from file("$buildDir/web")
        exclude '**/web.xml', '**/app.properties'
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }
}


task cleanConf(description: 'Cleans up conf directory') << {
    def dir = new File(tomcatDir, '/conf/app')
    if (dir.isDirectory()) {
        ant.delete(includeemptydirs: true) {
            fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
        }
    }
}

task undeploy(type: Delete, dependsOn: cleanConf) {
    delete("$tomcatDir/shared")
    delete("$tomcatDir/webapps/app-core")
    delete("$tomcatDir/webapps/app")
}

task restart(dependsOn: ['stop', 'cleanConf', ':app-core:deploy', ':app-web:deploy', ':app-portal:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}
